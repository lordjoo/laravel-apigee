import{_ as c,M as o,p as l,q as i,R as a,t as n,N as t,V as u,a1 as s}from"./framework-5866ffd3.js";const d={},r=s(`<h1 id="api-product" tabindex="-1"><a class="header-anchor" href="#api-product" aria-hidden="true">#</a> API Product</h1><h2 id="operations" tabindex="-1"><a class="header-anchor" href="#operations" aria-hidden="true">#</a> Operations</h2><h3 id="list-all-api-products" tabindex="-1"><a class="header-anchor" href="#list-all-api-products" aria-hidden="true">#</a> List all API Products</h3><p>Using the <code>get</code> method, you can get all API Products in your organization.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token variable">$products</span> <span class="token operator">=</span> <span class="token class-name class-name-fully-qualified static-context"><span class="token punctuation">\\</span>Lordjoo<span class="token punctuation">\\</span>Apigee<span class="token punctuation">\\</span>Facades<span class="token punctuation">\\</span>Apigee</span><span class="token operator">::</span><span class="token function">apiProduct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>the <code>get</code> method will return a Collection of <a href="#apiproduct-entity">ApiProduct</a> entities.</p><h3 id="get-an-api-product" tabindex="-1"><a class="header-anchor" href="#get-an-api-product" aria-hidden="true">#</a> Get an API Product</h3><p>Using the <code>find</code> method, you can get an API Product by it&#39;s name.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token variable">$product</span> <span class="token operator">=</span> <span class="token class-name class-name-fully-qualified static-context"><span class="token punctuation">\\</span>Lordjoo<span class="token punctuation">\\</span>Apigee<span class="token punctuation">\\</span>Facades<span class="token punctuation">\\</span>Apigee</span><span class="token operator">::</span><span class="token function">apiProduct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="create-an-api-product" tabindex="-1"><a class="header-anchor" href="#create-an-api-product" aria-hidden="true">#</a> Create an API Product</h3>`,10),h=a("code",null,"create",-1),k=a("code",null,"create",-1),m=a("code",null,"$data",-1),P={href:"https://apidocs.apigee.com/docs/api-products/1/types/APIProductRequest",target:"_blank",rel:"noopener noreferrer"},f=s(`<div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token variable">$product</span> <span class="token operator">=</span> <span class="token class-name class-name-fully-qualified static-context"><span class="token punctuation">\\</span>Lordjoo<span class="token punctuation">\\</span>Apigee<span class="token punctuation">\\</span>Facades<span class="token punctuation">\\</span>Apigee</span><span class="token operator">::</span><span class="token function">apiProduct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>If the API Product is created successfully, the method will return an instance of <a href="#apiproduct-entity">ApiProduct</a> entity.</p><h3 id="update-an-api-product" tabindex="-1"><a class="header-anchor" href="#update-an-api-product" aria-hidden="true">#</a> Update an API Product</h3>`,3),g=a("code",null,"update",-1),v=a("code",null,"$name",-1),_=a("code",null,"$data",-1),b=a("code",null,"$name",-1),A=a("code",null,"$data",-1),y={href:"https://apidocs.apigee.com/docs/api-products/1/types/APIProductRequest",target:"_blank",rel:"noopener noreferrer"},I=s(`<div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token variable">$product</span> <span class="token operator">=</span> <span class="token class-name class-name-fully-qualified static-context"><span class="token punctuation">\\</span>Lordjoo<span class="token punctuation">\\</span>Apigee<span class="token punctuation">\\</span>Facades<span class="token punctuation">\\</span>Apigee</span><span class="token operator">::</span><span class="token function">apiProduct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">,</span> <span class="token variable">$data</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>If the API Product is updated successfully, the method will return an instance of <a href="#apiproduct-entity">ApiProduct</a> entity.</p><div class="custom-container warning"><p class="custom-container-title">Note</p><p>The <code>update</code> method will replace the existing API Product with the new one based on the array of properties you passed, So if you want tp update let&#39;s say the attributes of the API Product, you have to pass the existing attributes along with the new ones.</p></div><h3 id="delete-an-api-product" tabindex="-1"><a class="header-anchor" href="#delete-an-api-product" aria-hidden="true">#</a> Delete an API Product</h3><p>Using the <code>delete</code> method, you can delete an API Product by it&#39;s name.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token class-name class-name-fully-qualified static-context"><span class="token punctuation">\\</span>Lordjoo<span class="token punctuation">\\</span>Apigee<span class="token punctuation">\\</span>Facades<span class="token punctuation">\\</span>Apigee</span><span class="token operator">::</span><span class="token function">apiProduct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="entity" tabindex="-1"><a class="header-anchor" href="#entity" aria-hidden="true">#</a> Entity</h2><h3 id="properties" tabindex="-1"><a class="header-anchor" href="#properties" aria-hidden="true">#</a> Properties</h3>`,8),x=a("thead",null,[a("tr",null,[a("th",null,"Property"),a("th",null,"Type"),a("th",null,"Description")])],-1),$=a("tr",null,[a("td",null,"name"),a("td",null,"string"),a("td",null,"Name of the API Product")],-1),w=a("tr",null,[a("td",null,"displayName"),a("td",null,"string"),a("td",null,"Display name of the API Product")],-1),q=a("tr",null,[a("td",null,"description"),a("td",null,"string"),a("td",null,"Description of the API Product")],-1),L=a("tr",null,[a("td",null,"approvalType"),a("td",null,"string"),a("td",null,"Approval type of the API Product")],-1),R=a("td",null,"attributes",-1),N=a("td",null,"Attributes of the API Product",-1),U=a("tr",null,[a("td",null,"proxies"),a("td",null,"string[]"),a("td",null,"Proxies of the API Product")],-1),j=a("tr",null,[a("td",null,"environments"),a("td",null,"string[]"),a("td",null,"Environments of the API Product")],-1),F=a("tr",null,[a("td",null,"apiResources"),a("td",null,"string[]"),a("td",null,"API Resources of the API Product")],-1),D=a("tr",null,[a("td",null,"quota"),a("td",null,"Quota"),a("td",null,"Quota of the API Product")],-1),E=a("tr",null,[a("td",null,"quotaInterval"),a("td",null,"string"),a("td",null,"Quota interval of the API Product")],-1),T=a("tr",null,[a("td",null,"quotaTimeUnit"),a("td",null,"string"),a("td",null,"Quota time unit of the API Product")],-1),V=a("tr",null,[a("td",null,"scopes"),a("td",null,"string[]"),a("td",null,"Scopes of the API Product")],-1),C=s(`<h3 id="methods" tabindex="-1"><a class="header-anchor" href="#methods" aria-hidden="true">#</a> Methods</h3><h4 id="update-array-data" tabindex="-1"><a class="header-anchor" href="#update-array-data" aria-hidden="true">#</a> update(array $data)</h4><p>Update the API Product with the given data.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token variable">$product</span> <span class="token operator">=</span> <span class="token class-name class-name-fully-qualified static-context"><span class="token punctuation">\\</span>Lordjoo<span class="token punctuation">\\</span>Apigee<span class="token punctuation">\\</span>Facades<span class="token punctuation">\\</span>Apigee</span><span class="token operator">::</span><span class="token function">apiProduct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$product</span><span class="token operator">-&gt;</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="delete" tabindex="-1"><a class="header-anchor" href="#delete" aria-hidden="true">#</a> delete()</h4><p>Delete the API Product.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token variable">$product</span> <span class="token operator">=</span> <span class="token class-name class-name-fully-qualified static-context"><span class="token punctuation">\\</span>Lordjoo<span class="token punctuation">\\</span>Apigee<span class="token punctuation">\\</span>Facades<span class="token punctuation">\\</span>Apigee</span><span class="token operator">::</span><span class="token function">apiProduct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$product</span><span class="token operator">-&gt;</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,7);function Q(B,S){const e=o("ExternalLinkIcon"),p=o("RouterLink");return l(),i("div",null,[r,a("p",null,[n("Using the "),h,n(" method, you can create an API Product. the "),k,n(" method accepts one parameter "),m,n(" which is an array of the API Product properties "),a("a",P,[n("APIProductRequest"),t(e)])]),f,a("p",null,[n("Using the "),g,n(" method, you can update an API Product, the update method accepts two parameters "),v,n(" and "),_,n(" where "),b,n(" is the name of the API Product you want to update and "),A,n(" is an array of the API Product properties "),a("a",y,[n("APIProductRequest"),t(e)])]),I,a("table",null,[x,a("tbody",null,[$,w,q,L,a("tr",null,[R,a("td",null,[t(p,{to:"/guide/entities/attribute.html"},{default:u(()=>[n("Attribute[]")]),_:1})]),N]),U,j,F,D,E,T,V])]),C])}const z=c(d,[["render",Q],["__file","api-product.html.vue"]]);export{z as default};
